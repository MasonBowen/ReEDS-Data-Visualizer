###
source(file.path(functions.directory, "gdx_extract_all.R"))
# This script loads a function 'gdx_extract_all()' which will extract ALL of the data present in the 'gdx.structure'
#     list (loaded above) from ALL of the given gdx files in the scenarios variable
###
source(file.path(functions.directory, "read_basic_nongdx_info.R"))
# This script loads the csv's which contain data on the states and technology types, the years and the
#     color coordination for the data and plots.
#     NOTE: These csv's will allow non-R users to manipulate how the data is rearranged and aggregated
#           for the technologies and state data, there is a column for user defined aggregations
###
source(file.path(functions.directory, "mapping_data_and_functions.R"))
# This script reads in the shape file and formats it a bit
###
source(file.path(basicdata.directory, "plot_parameters.R"))
# This script loads some basic plotting parameters (as a list),
# so far this is all R files, but my intention is to change this over to a csv for non-r-user manipulation
###
source(file.path(functions.directory, "plot_data_simplification.R"))
# This script loads in a series of functions all of which are used to process the data before plotting
# see actual script for more description
###
source(file.path(functions.directory, "plot_functions_TB.R"))
# This script loads in a series of functions for plotting
# see actual script for more description
###
source(file.path(functions.directory, "sub_select_csv.R"))
# This script loads a function 'select_cat_col_cat_ord()' which takes the csv files loaded above and user-inputs from the shiny
#     to create a list of data.tables with the original values and the new desired values. This lsit is then used by the functions
#     loaded in the "plot_data_simplification.R" to process/simplify the data
# --------------------------------------------- /
# Load in gdx files
# --------------------------------------------- /
# The below variable contains all the gdx data specified by the 'gdx.structure' list loaded above
# This can take a bit based on the number of scenarios being loaded in
# If you are feeling brave, set parallel = TRUE to activate parallel computing to speed up loading of data
# 5 scenarios = ~40 seconds with parallel = FALSE and ~15 seconds with parallel = TRUE
gdx_all_var <- gdx_extract_all(scenario = scenarios, parallel = TRUE)
# --------------------------------------------- /
# Load in shiny ui-server structure and run app
# --------------------------------------------- /
# The ui (User Interface) create the skeleton for the shiny but does not actually perform any real action
ui <- fluidPage(theme = shinytheme("readable"),
titlePanel("ReEDS Interactive Scenario Comparison Dashboard"),
sidebarLayout(
source(file.path(ui.directory, "sidebar.ui_new.R"), local = TRUE)$value, # creates a sidebar visible from all tabs
mainPanel(
tabsetPanel(type = "tabs", id = "name",
source(file.path(ui.directory, "instructions.ui.R"),  local = TRUE)$value, # Instructions tab
source(file.path(ui.directory, "capacity.ui.R"),  local = TRUE)$value, # Capacity tab
source(file.path(ui.directory, "generation.ui.R"),  local = TRUE)$value, # Generation tab
source(file.path(ui.directory, "flow.ui.R"),  local = TRUE)$value # Transmission flow tab
), width = 9
)
)
)
# The server is the actual workhorse of the shiny, runs all the functions etc.
server <- function(input, output) {
source(file.path(temp.dir.server, "reactivedef.server.R"),  local = TRUE)$value # controls the sidebar
source(file.path(temp.dir.server, "capacity.server.R"),  local = TRUE)$value # controls the capacity tab
source(file.path(temp.dir.server, "generation.server.R"),  local = TRUE)$value # controls the generation tab
source(file.path(temp.dir.server, "flow.server.R"),  local = TRUE)$value # controls the transmission flow tab
}
# runs the app
shinyApp(ui = ui, server = server)
# Load rest of packages
pacman::p_load(data.table,           # Used to manipulate data frames and create data.table objects
tidyverse,            # Used to manipulate objects (primarily just ggplot)
qdap,                 # Used for its mgsub fucntion which allows for a gsub with multiple pattern-replacement pairs,
#      could be replaced with stringr::str_replace_all(string, list) if causing issues
plotly,               # Used for creating html-power interactive plots
htmlwidgets,          # Used for manipulating html objects and (one day) saving interactive
# plots from the tool as html files
fastmatch,            # Used for fast matching, primarily '%fin%' as replacement to '%in%'
parallel,             # Used for parallel computing NOTE!!! this is the most likely of the packages to cause issues
# if you have issues regarding this one just comment it out and set 'parallel' to FALSE
# in the gdx_extract_all() function below
processx,             # oof, no idea, I think it's extraneous but will check it out later
sf,                   # all of the following packages are used to manipulate shape files and create country maps
raster,
sp,
rgeos,
maptools,
scales,
gdxrrw,               # needed to interact with GAMS .gdx files
shiny,                # Used to actually render the shiny output
shinythemes)
gams.directory <- "/../../../../../../Program Files (x86)/GAMS/win64" # should point to your installation of GAMS
base.directory <- "New_Attempt"         # should point to the folder where all this data is stored (relative to current directory)
functions.directory <- file.path(base.directory, "functions") # Should point to folder with all non-shiny scripts
basicdata.directory <- file.path(base.directory, "basic data") # Should point to folder with all the csv data
server.directory <- file.path(base.directory, "server") # Should point to folder with all shiny-server scripts
ui.directory <- file.path(base.directory, "ui") # Should point to folder with all shiny-ui scripts
data.folder <- "../capexp-india/ReEDS-2.0/gdxfiles" # should point to location of '.gdx' files
scenarios <- gsub(c(list.files(data.folder, pattern = "\\.gdx$")), # here you can select which scenarios you are interested in
pattern = "\\.gdx$", replacement = "",
perl = T)[c(1,2)]  ### NOTE: the indexing here right on the end might need to change
shape.file.loc <- "New_Attempt/basic data/mapping/IND_adm1gadmFinal_wKashWhole_WGS84.shp" # This should point directly to .shp file
scenarios
# Set working directory as needed
setwd("/../C:/Users/tbowen/Documents/Github/InteractiveDataVisalizer")
# Set working directory as needed
setwd("/../")
# Set working directory as needed
setwd("/../C:/Users/tbowen/Documents/Github/InteractiveDataVisalizer")
# Set working directory as needed
setwd("/../Users/tbowen/Documents/Github/InteractiveDataVisalizer")
# Set working directory as needed
setwd("Users/tbowen/Documents/Github/InteractiveDataVisalizer")
# Set working directory as needed
setwd("Users/tbowen/")
# Set working directory as needed
setwd("Documents/Github/InteractiveDataVisualizer")
# Set working directory as needed
setwd("/../C:/Users/tbowen/Documents/Github/InteractiveDataVisalizer")
# Set working directory as needed
setwd("/../C:/Users/tbowen/Documents/Github/InteractiveDataVisualizer")
# Set working directory as needed
setwd("/../Users/tbowen/Documents/Github/InteractiveDataVisualizer")
gams.directory <- "/../../../../../../Program Files (x86)/GAMS/win64" # should point to your installation of GAMS
base.directory <- "ReEDS - Visualization Tool"         # should point to the folder where all this data is stored (relative to current directory)
functions.directory <- file.path(base.directory, "functions") # Should point to folder with all non-shiny scripts
basicdata.directory <- file.path(base.directory, "basic data") # Should point to folder with all the csv data
server.directory <- file.path(base.directory, "server") # Should point to folder with all shiny-server scripts
ui.directory <- file.path(base.directory, "ui") # Should point to folder with all shiny-ui scripts
data.folder <- "../capexp-india/ReEDS-2.0/gdxfiles" # should point to location of '.gdx' files
scenarios <- gsub(c(list.files(data.folder, pattern = "\\.gdx$")), # here you can select which scenarios you are interested in
pattern = "\\.gdx$", replacement = "",
perl = T)[c(1,4,5)]  ### NOTE: the indexing here right on the end might need to change
shape.file.loc <- "New_Attempt/basic data/mapping/IND_adm1gadmFinal_wKashWhole_WGS84.shp" # This should point directly to .shp file
source(file.path(functions.directory, "read_basic_gdx_info.R"))
# Set working directory as needed
setwd("/../Users/tbowen/Documents/Github/InteractiveDataVisualizer")
gams.directory <- "/../../../../../../Program Files (x86)/GAMS/win64" # should point to your installation of GAMS
base.directory <- "ReEDS - Visualization Tool"         # should point to the folder where all this data is stored (relative to current directory)
functions.directory <- file.path(base.directory, "functions") # Should point to folder with all non-shiny scripts
basicdata.directory <- file.path(base.directory, "basic data") # Should point to folder with all the csv data
server.directory <- file.path(base.directory, "server") # Should point to folder with all shiny-server scripts
ui.directory <- file.path(base.directory, "ui") # Should point to folder with all shiny-ui scripts
data.folder <- "../capexp-india/ReEDS-2.0/gdxfiles" # should point to location of '.gdx' files
scenarios <- gsub(c(list.files(data.folder, pattern = "\\.gdx$")), # here you can select which scenarios you are interested in
pattern = "\\.gdx$", replacement = "",
perl = T)[c(1,4,5)]  ### NOTE: the indexing here right on the end might need to change
shape.file.loc <- "New_Attempt/basic data/mapping/IND_adm1gadmFinal_wKashWhole_WGS84.shp" # This should point directly to .shp file
source(file.path(functions.directory, "read_basic_gdx_info.R"))
###
source(file.path(functions.directory, "gdx_extract_all.R"))
###
source(file.path(functions.directory, "read_basic_nongdx_info.R"))
###
source(file.path(functions.directory, "mapping_data.R"))
# Load rest of packages
pacman::p_load(data.table,           # Used to manipulate data frames and create data.table objects
tidyverse,            # Used to manipulate objects (primarily just ggplot)
qdap,                 # Used for its mgsub fucntion which allows for a gsub with multiple pattern-replacement pairs,
#      could be replaced with stringr::str_replace_all(string, list) if causing issues
plotly,               # Used for creating html-power interactive plots
htmlwidgets,          # Used for manipulating html objects and (one day) saving interactive
# plots from the tool as html files
fastmatch,            # Used for fast matching, primarily '%fin%' as replacement to '%in%'
parallel,             # Used for parallel computing NOTE!!! this is the most likely of the packages to cause issues
# if you have issues regarding this one just comment it out and set 'parallel' to FALSE
# in the gdx_extract_all() function below
processx,             # oof, no idea, I think it's extraneous but will check it out later
sf,                   # all of the following packages are used to manipulate shape files and create country maps
raster,
sp,
rgeos,
maptools,
scales,
rgdal,
gdxrrw,               # needed to interact with GAMS .gdx files
shiny,                # Used to actually render the shiny output
shinythemes)
###
source(file.path(functions.directory, "mapping_data.R"))
base.directory
basicdata.directory
shape.file.loc <- file.path(basicdata.directory, "mapping/IND_adm1gadmFinal_wKashWhole_WGS84.shp") # This should point directly to .shp file
shape.file.loc
source(file.path(functions.directory, "read_basic_gdx_info.R"))
###
source(file.path(functions.directory, "gdx_extract_all.R"))
###
source(file.path(functions.directory, "read_basic_nongdx_info.R"))
###
source(file.path(functions.directory, "mapping_data.R"))
###
source(file.path(basicdata.directory, "plot_parameters.R"))
###
source(file.path(functions.directory, "plot_data_simplification.R"))
###
source(file.path(functions.directory, "plot_functions.R"))
###
source(file.path(functions.directory, "sub_select_csv.R"))
gdx_all_var <- gdx_extract_all(scenario = scenarios, parallel = TRUE)
base.directory
# Third write a function which can extract ALL of the information desired above in gdx.structure
gdx_extract_all <- function(scenarios, variable_list = gdx.structure, scen.dir = data.folder, gms.dir = gams.directory, parallel = FALSE){
# Extract all variable according to list in the 'variable_list' input
# If running in parallel
if(parallel){
require(parallel)
# for parallel operation
cl <- makeCluster(detectCores()-1)
# following exports certain scripts and variale to the clusters (which cannot see the global environment)
clusterEvalQ(cl, {
## set up each worker.  Could also use clusterExport()
library(gdxrrw)
library(data.table)
gams.directory <- "/../../../../../../Program Files (x86)/GAMS/win64"
gms.dir <- "/../../../../../../Program Files (x86)/GAMS/win64"
data.folder <- "../capexp-india/ReEDS-2.0/gdxfiles"
source("ReEDS - Visualization Tool/functions/read_basic_gdx_info.R")
NULL
})
# lapply across scenarios
total_variables <- parLapply(cl = cl, scenarios, function(scen, var_list = variable_list, sd = scen.dir){
# lapply across variables in 'variable_list'
variables_to_extract <- lapply(var_list, function(vl, vl_tot = var_list, scen. = scen, sd. = sd){
# Values from gdx.structure
var_extract_nm <- vl[["obj.name"]]
var_extract_col_orig <- vl[["col.orig"]]
var_extract_col_new <- vl[["col.new"]]
var_extract_type <- vl[["obj.type"]]
# load data
gdx.data <- rgdx.alltype(gdxFileName = paste0(sd., "/", scen., ".gdx"), symbolName = var_extract_nm, objectType = var_extract_type)$DF
# reformat as appropriate
if(is.data.frame(gdx.data)){
setDT(gdx.data)
setnames(gdx.data, old = var_extract_col_orig, new = var_extract_col_new)
gdx.data <- change_col_types(gdx.data, gdx.str = vl_tot)
}
return(gdx.data)
})
return(variables_to_extract)
})
# need to shut down clusters after finished
stopCluster(cl)
}else{
# lapply across scenarios
total_variables <- lapply(scenarios, function(scen, var_list = variable_list, sd = scen.dir){
# lapply across variables
variables_to_extract <- lapply(var_list, function(vl, vl_tot = var_list, scen. = scen, sd. = sd){
# Values from gdx.structure
var_extract_nm <- vl[["obj.name"]]
var_extract_col_orig <- vl[["col.orig"]]
var_extract_col_new <- vl[["col.new"]]
var_extract_type <- vl[["obj.type"]]
# load data
gdx.data <- rgdx.alltype(gdxFileName = paste0(sd., "/", scen., ".gdx"), symbolName = var_extract_nm, objectType = var_extract_type)$DF
# reformat as appropriate
if(is.data.frame(gdx.data)){
setDT(gdx.data)
setnames(gdx.data, old = var_extract_col_orig, new = var_extract_col_new)
gdx.data <- change_col_types(gdx.data, gdx.str = vl_tot)
}
return(gdx.data)
})
return(variables_to_extract)
})
}
# append scenario names
names(total_variables) <- scenarios
return(total_variables)
}
gdx_all_var <- gdx_extract_all(scenario = scenarios, parallel = TRUE)
functions.directory
writeClipboard(functions.directory)
# Third write a function which can extract ALL of the information desired above in gdx.structure
gdx_extract_all <- function(scenarios, variable_list = gdx.structure, scen.dir = data.folder, gms.dir = gams.directory, parallel = FALSE){
# Extract all variable according to list in the 'variable_list' input
# If running in parallel
if(parallel){
require(parallel)
# for parallel operation
cl <- makeCluster(detectCores()-1)
# following exports certain scripts and variale to the clusters (which cannot see the global environment)
clusterEvalQ(cl, {
## set up each worker.  Could also use clusterExport()
library(gdxrrw)
library(data.table)
gams.directory <- "/../../../../../../Program Files (x86)/GAMS/win64"
gms.dir <- "/../../../../../../Program Files (x86)/GAMS/win64"
data.folder <- "../capexp-india/ReEDS-2.0/gdxfiles"
functions.directory <- "ReEDS - Visualization Tool/functions"
source("ReEDS - Visualization Tool/functions/read_basic_gdx_info.R")
NULL
})
# lapply across scenarios
total_variables <- parLapply(cl = cl, scenarios, function(scen, var_list = variable_list, sd = scen.dir){
# lapply across variables in 'variable_list'
variables_to_extract <- lapply(var_list, function(vl, vl_tot = var_list, scen. = scen, sd. = sd){
# Values from gdx.structure
var_extract_nm <- vl[["obj.name"]]
var_extract_col_orig <- vl[["col.orig"]]
var_extract_col_new <- vl[["col.new"]]
var_extract_type <- vl[["obj.type"]]
# load data
gdx.data <- rgdx.alltype(gdxFileName = paste0(sd., "/", scen., ".gdx"), symbolName = var_extract_nm, objectType = var_extract_type)$DF
# reformat as appropriate
if(is.data.frame(gdx.data)){
setDT(gdx.data)
setnames(gdx.data, old = var_extract_col_orig, new = var_extract_col_new)
gdx.data <- change_col_types(gdx.data, gdx.str = vl_tot)
}
return(gdx.data)
})
return(variables_to_extract)
})
# need to shut down clusters after finished
stopCluster(cl)
}else{
# lapply across scenarios
total_variables <- lapply(scenarios, function(scen, var_list = variable_list, sd = scen.dir){
# lapply across variables
variables_to_extract <- lapply(var_list, function(vl, vl_tot = var_list, scen. = scen, sd. = sd){
# Values from gdx.structure
var_extract_nm <- vl[["obj.name"]]
var_extract_col_orig <- vl[["col.orig"]]
var_extract_col_new <- vl[["col.new"]]
var_extract_type <- vl[["obj.type"]]
# load data
gdx.data <- rgdx.alltype(gdxFileName = paste0(sd., "/", scen., ".gdx"), symbolName = var_extract_nm, objectType = var_extract_type)$DF
# reformat as appropriate
if(is.data.frame(gdx.data)){
setDT(gdx.data)
setnames(gdx.data, old = var_extract_col_orig, new = var_extract_col_new)
gdx.data <- change_col_types(gdx.data, gdx.str = vl_tot)
}
return(gdx.data)
})
return(variables_to_extract)
})
}
# append scenario names
names(total_variables) <- scenarios
return(total_variables)
}
gdx_all_var <- gdx_extract_all(scenario = scenarios, parallel = TRUE)
writeClipboard(basicdata.directory)
# Third write a function which can extract ALL of the information desired above in gdx.structure
gdx_extract_all <- function(scenarios, variable_list = gdx.structure, scen.dir = data.folder, gms.dir = gams.directory, parallel = FALSE){
# Extract all variable according to list in the 'variable_list' input
# If running in parallel
if(parallel){
require(parallel)
# for parallel operation
cl <- makeCluster(detectCores()-1)
# following exports certain scripts and variale to the clusters (which cannot see the global environment)
clusterEvalQ(cl, {
## set up each worker.  Could also use clusterExport()
library(gdxrrw)
library(data.table)
gams.directory <- "/../../../../../../Program Files (x86)/GAMS/win64"
gms.dir <- "/../../../../../../Program Files (x86)/GAMS/win64"
data.folder <- "../capexp-india/ReEDS-2.0/gdxfiles"
functions.directory <- "ReEDS - Visualization Tool/functions"
basicdata.directory <- "ReEDS - Visualization Tool/basic data"
source("ReEDS - Visualization Tool/functions/read_basic_gdx_info.R")
NULL
})
# lapply across scenarios
total_variables <- parLapply(cl = cl, scenarios, function(scen, var_list = variable_list, sd = scen.dir){
# lapply across variables in 'variable_list'
variables_to_extract <- lapply(var_list, function(vl, vl_tot = var_list, scen. = scen, sd. = sd){
# Values from gdx.structure
var_extract_nm <- vl[["obj.name"]]
var_extract_col_orig <- vl[["col.orig"]]
var_extract_col_new <- vl[["col.new"]]
var_extract_type <- vl[["obj.type"]]
# load data
gdx.data <- rgdx.alltype(gdxFileName = paste0(sd., "/", scen., ".gdx"), symbolName = var_extract_nm, objectType = var_extract_type)$DF
# reformat as appropriate
if(is.data.frame(gdx.data)){
setDT(gdx.data)
setnames(gdx.data, old = var_extract_col_orig, new = var_extract_col_new)
gdx.data <- change_col_types(gdx.data, gdx.str = vl_tot)
}
return(gdx.data)
})
return(variables_to_extract)
})
# need to shut down clusters after finished
stopCluster(cl)
}else{
# lapply across scenarios
total_variables <- lapply(scenarios, function(scen, var_list = variable_list, sd = scen.dir){
# lapply across variables
variables_to_extract <- lapply(var_list, function(vl, vl_tot = var_list, scen. = scen, sd. = sd){
# Values from gdx.structure
var_extract_nm <- vl[["obj.name"]]
var_extract_col_orig <- vl[["col.orig"]]
var_extract_col_new <- vl[["col.new"]]
var_extract_type <- vl[["obj.type"]]
# load data
gdx.data <- rgdx.alltype(gdxFileName = paste0(sd., "/", scen., ".gdx"), symbolName = var_extract_nm, objectType = var_extract_type)$DF
# reformat as appropriate
if(is.data.frame(gdx.data)){
setDT(gdx.data)
setnames(gdx.data, old = var_extract_col_orig, new = var_extract_col_new)
gdx.data <- change_col_types(gdx.data, gdx.str = vl_tot)
}
return(gdx.data)
})
return(variables_to_extract)
})
}
# append scenario names
names(total_variables) <- scenarios
return(total_variables)
}
gdx_all_var <- gdx_extract_all(scenario = scenarios, parallel = TRUE)
# The ui (User Interface) create the skeleton for the shiny but does not actually perform any real action
ui <- fluidPage(theme = shinytheme("readable"),
titlePanel("ReEDS Interactive Scenario Comparison Dashboard"),
sidebarLayout(
source(file.path(ui.directory, "sidebar.ui_new.R"), local = TRUE)$value, # creates a sidebar visible from all tabs
mainPanel(
tabsetPanel(type = "tabs", id = "name",
source(file.path(ui.directory, "instructions.ui.R"),  local = TRUE)$value, # Instructions tab
source(file.path(ui.directory, "capacity.ui.R"),  local = TRUE)$value, # Capacity tab
source(file.path(ui.directory, "generation.ui.R"),  local = TRUE)$value, # Generation tab
source(file.path(ui.directory, "flow.ui.R"),  local = TRUE)$value # Transmission flow tab
), width = 9
)
)
)
# The server is the actual workhorse of the shiny, runs all the functions etc.
server <- function(input, output) {
source(file.path(server.directory, "reactivedef.server.R"),  local = TRUE)$value # controls the sidebar
source(file.path(server.directory, "capacity.server.R"),  local = TRUE)$value # controls the capacity tab
source(file.path(server.directory, "generation.server.R"),  local = TRUE)$value # controls the generation tab
source(file.path(server.directory, "flow.server.R"),  local = TRUE)$value # controls the transmission flow tab
}
# runs the app
shinyApp(ui = ui, server = server)
# The ui (User Interface) create the skeleton for the shiny but does not actually perform any real action
ui <- fluidPage(theme = shinytheme("readable"),
titlePanel("ReEDS Interactive Scenario Comparison Dashboard"),
sidebarLayout(
source(file.path(ui.directory, "sidebar.ui_new.R"), local = TRUE)$value, # creates a sidebar visible from all tabs
mainPanel(
tabsetPanel(type = "tabs", id = "name",
source(file.path(ui.directory, "instructions.ui.R"),  local = TRUE)$value, # Instructions tab
source(file.path(ui.directory, "capacity.ui.R"),  local = TRUE)$value, # Capacity tab
source(file.path(ui.directory, "generation.ui.R"),  local = TRUE)$value, # Generation tab
source(file.path(ui.directory, "flow.ui.R"),  local = TRUE)$value # Transmission flow tab
), width = 9
)
)
)
# The server is the actual workhorse of the shiny, runs all the functions etc.
server <- function(input, output) {
source(file.path(server.directory, "reactivedef.server.R"),  local = TRUE)$value # controls the sidebar
source(file.path(server.directory, "capacity.server.R"),  local = TRUE)$value # controls the capacity tab
source(file.path(server.directory, "generation.server.R"),  local = TRUE)$value # controls the generation tab
source(file.path(server.directory, "flow.server.R"),  local = TRUE)$value # controls the transmission flow tab
}
# runs the app
shinyApp(ui = ui, server = server)
# The ui (User Interface) create the skeleton for the shiny but does not actually perform any real action
ui <- fluidPage(theme = shinytheme("readable"),
titlePanel("ReEDS Interactive Scenario Comparison Dashboard"),
sidebarLayout(
source(file.path(ui.directory, "sidebar.ui_new.R"), local = TRUE)$value, # creates a sidebar visible from all tabs
mainPanel(
tabsetPanel(type = "tabs", id = "name",
source(file.path(ui.directory, "instructions.ui.R"),  local = TRUE)$value, # Instructions tab
source(file.path(ui.directory, "capacity.ui.R"),  local = TRUE)$value, # Capacity tab
source(file.path(ui.directory, "generation.ui.R"),  local = TRUE)$value, # Generation tab
source(file.path(ui.directory, "flow.ui.R"),  local = TRUE)$value # Transmission flow tab
), width = 9
)
)
)
# The server is the actual workhorse of the shiny, runs all the functions etc.
server <- function(input, output) {
source(file.path(server.directory, "reactivedef.server.R"),  local = TRUE)$value # controls the sidebar
source(file.path(server.directory, "capacity.server.R"),  local = TRUE)$value # controls the capacity tab
source(file.path(server.directory, "generation.server.R"),  local = TRUE)$value # controls the generation tab
source(file.path(server.directory, "flow.server.R"),  local = TRUE)$value # controls the transmission flow tab
}
# runs the app
shinyApp(ui = ui, server = server)
# The server is the actual workhorse of the shiny, runs all the functions etc.
server <- function(input, output) {
source(file.path(server.directory, "reactivedef.server.R"),  local = TRUE)$value # controls the sidebar
source(file.path(server.directory, "capacity.server.R"),  local = TRUE)$value # controls the capacity tab
source(file.path(server.directory, "generation.server.R"),  local = TRUE)$value # controls the generation tab
source(file.path(server.directory, "flow.server.R"),  local = TRUE)$value # controls the transmission flow tab
}
# runs the app
shinyApp(ui = ui, server = server)
# The server is the actual workhorse of the shiny, runs all the functions etc.
server <- function(input, output) {
source(file.path(server.directory, "reactivedef.server.R"),  local = TRUE)$value # controls the sidebar
source(file.path(server.directory, "capacity.server.R"),  local = TRUE)$value # controls the capacity tab
source(file.path(server.directory, "generation.server.R"),  local = TRUE)$value # controls the generation tab
source(file.path(server.directory, "flow.server.R"),  local = TRUE)$value # controls the transmission flow tab
}
# runs the app
shinyApp(ui = ui, server = server)
# The server is the actual workhorse of the shiny, runs all the functions etc.
server <- function(input, output) {
source(file.path(server.directory, "reactivedef.server.R"),  local = TRUE)$value # controls the sidebar
source(file.path(server.directory, "capacity.server.R"),  local = TRUE)$value # controls the capacity tab
source(file.path(server.directory, "generation.server.R"),  local = TRUE)$value # controls the generation tab
source(file.path(server.directory, "flow.server.R"),  local = TRUE)$value # controls the transmission flow tab
}
# runs the app
shinyApp(ui = ui, server = server)
